{% extends './layouts/layout.njk' %}

{% from "govuk/components/breadcrumbs/macro.njk" import govukBreadcrumbs %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/inset-text/macro.njk" import govukInsetText %}

{% block beforeContent %}
  {{ govukBreadcrumbs({
    items: [
      {
        text: "Home",
        href: "/"
      }
    ]
  }) }}
{% endblock %}

{% block content %}
<div class="govuk-grid-row">
  <div class="govuk-grid-column-two-thirds">
    <h1 class="govuk-heading-l">Welcome to a little demo of SSE ...</h1>

    {% set id = [1,2,3,4,5,6,7,8,9] | random %}

    {{ govukInsetText({
    html: 'The inputs on this page provide the ability to create a new EventSource and trigger an event to be sent to an already listening EventSource. The intention is to demonstrate an event can be triggered outside of the initial request lifecycle on the backend.<br><br>Events are logged to the console.'
    }) }}

    {{ govukInput({
      label: {
        text: 'Set up EventSource',
        classes: 'govuk-label--l',
        isPageHeading: false
      },
      hint: {
        text: 'Enter an id to be used in the creation of the EventSource'
      },
      id: 'eventsId',
      name: 'eventsId',
      value: id
    }) }}

    {{ govukButton({
      href: "javascript:startSSE()",
      text: 'Create EventSource'
    }) }}

    {{ govukInput({
      label: {
        text: 'Trigger event',
        classes: 'govuk-label--l',
        isPageHeading: false
      },
      hint: {
        text: 'Enter the id against which to trigger an event'
      },
      id: 'triggerId',
      name: 'triggerId',
      value: id
    }) }}

    {{ govukButton({
      href: "javascript:trigger()",
      text: 'Trigger event'
    }) }}

    <script language="javascript" type="text/javascript">
      console.log('Hi there. Use the buttons in the page to create an EventSource and see the logging...')

      startSSE = () => {
        const eventsId = document.getElementById('eventsId').value
        console.log('Creating EventSource with id', eventsId)
        const source = new EventSource('/events?id=' + eventsId)
        source.onopen = e => console.log('open event =>', e)
        source.onerror = e => console.error('error for id', eventsId, e.data)
        source.onmessage = e => console.log('received message event for id', eventsId, e.data)

        source.addEventListener('trigger',  e => console.log('received trigger event for id', eventsId, e.data))
        source.addEventListener('ping', e => console.log('received ping event for id', eventsId, 'at', e.data))
        source.addEventListener('init', e => console.log('init event =>', e))
        source.addEventListener('end', e => {
          console.log('end event from the server, closing connection', e)
          source.close()
        })
      }

      trigger = () => {
        const triggerId = document.getElementById('triggerId').value
        console.log('Triggering event for listener', triggerId)
        const xhr = new XMLHttpRequest()
        xhr.open('GET', '/trigger?id=' + triggerId, true)
        xhr.send()
      }
    </script>
  </div>
  <div>

</div>
{% endblock %}
